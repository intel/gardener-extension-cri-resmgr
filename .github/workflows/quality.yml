name: Quality

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  unittest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Install mockgen
        run: go install github.com/golang/mock/mockgen@v1.6.0

      - name: Test
        run: make test

  gofmt:
    environment: testing
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - uses: actions/checkout@v3

      - uses: Jerome1337/gofmt-action@v1.0.5
        with:
          gofmt-path: "./pkg"
          gofmt-flags: "-l -d"

      - name: Run gofmt
        run: |
          if [ "$(gofmt -l . | wc -l)" -ne "0" ]; then
            gofmt -d .
            echo "gofmt found formatting errors"
            exit 1
          fi
        id: gofmt

      - name: Report gofmt Results
        if: success()
        uses: actions/upload-artifact@v1
        with:
          name: gofmt-report
          path: .

  golint:
    environment: testing
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - uses: actions/checkout@v3
        # with:
        #   # default fetch-depth is insufficent to find previous coverage notes
        #   fetch-depth: 10

      - name: dd
        run: go generate ./...
      # - uses: gwatts/go-coverage-action@v1
      #   id: coverage
      #   with:
      #     # Optional coverage threshold
      #     # use fail-coverage to determine what should happen below this threshold
      #     coverage-threshold: 80
      #     # collect coverage for all packages beyond the one under test
      #     cover-pkg: ./pkg/...
      #     #     # Ignore code-generated files when calculating coverage totals
      #     ignore-pattern: |
      #       ./test
      # - name: Install dependencies
      #   run: |
      #     go version
      #     go get -u golang.org/x/lint/golint
      - name: Run vet & lint
        run: |
          go vet ./...

        # golint ./...

      # Dont work
      # - name: golint
      #   run: |
      #     go env
      #     go get golang.org/x/lint/golint
      #     golint ./...

      # https://github.com/golangci/golangci-lint-action
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: v1.29

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the all caching functionality will be complete disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

      #     \.pb\.go$
      #     \_string\.go$

      #     # A url that the html report will be accessible at, once your
      #     # workflow uploads it.  Used in the pull request comment.
      #     report-url: https://artifacts.example.com/go-coverage/${{ github.ref_name}}.html

      # - name: Upload coverage to s3
      #   # ensure this runs regardless of whether the threshold is met using always()
      #   if: always() && steps.coverage.outputs.report-pathname != ''
      #   run: |
      #     aws s3 cp ${{ steps.coverage.outputs.report-pathname }} s3://artifacts.example.com-bucket/go-coverage/${{ github.ref_name}}.html

  coverage:
    environment: testing
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # default fetch-depth is insufficent to find previous coverage notes
          fetch-depth: 10

      - name: dd
        run: go generate ./...
      # - name: Fail Build if gofmt found errors
      #   if: failure()
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: gofmt-error.txt
      #     path: .
      #     content: |
      #       gofmt found formatting errors
      # - name: golangci-lint
      #   uses: golangci/golangci-lint-action@v3
      # - name: Report golint Results
      #   if: steps.golint.outputs.exit-code == '0'
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: golint-report
      #     path: .
      # - name: Fail Build if golint found errors
      #   if: steps.golint.outputs.exit-code != '0'
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: golint-error.txt
      #     path: .
      #     content: |
      #       golint found linting errors
      - name: Create upload description
        run: mkdir ./upload/

      - name: Run Tests and Generate Coverage Report
        run: |
          go test -coverprofile=coverage.out ./pkg/...
          go tool cover -html=coverage.out -o ./upload/coverage.html

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v1
        with:
          name: coverage-report
          path: ./upload/coverage.html
