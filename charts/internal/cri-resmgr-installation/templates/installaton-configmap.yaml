# Copyright 2022 Intel Corporation. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: cri-resmgr-installation-script
  namespace: kube-system
data:
  install-cri-resmgr.sh: |-
    #!/bin/bash
    # check if kubelet service file is a symlink
    if [[ -L "/var/host/etc/systemd/system/kubelet.service" ]]; then
      echo "err: kubelet.service file is a symlink"
      exit 1
    fi
    function install() {
      echo Installing binaries from /opt/ to host /
      cp -v -r /cri-resmgr-installation/opt/ /var/host/

      echo Installing systemd unit
      cp -v /cri-resmgr-installation/etc/systemd/system/cri-resource-manager.service  /var/host/etc/systemd/system/cri-resource-manager.service

      echo 'Installing systemd unit config file (contains POLICY_OPTIONS and CONFIG_OPTIONS variables - pointing to fallback.cfg)'
      mkdir -p /var/host/etc/default/
      cp -v /cri-resmgr-installation/etc/default/cri-resource-manager /var/host/etc/default/

      echo 'Installing cri-resource-manager fallback.cfg (when mounted) otherwise copy sample included inside container image'
      mkdir -p /var/host/etc/cri-resmgr
      if [[ -f /etc/cri-resmgr/fallback.cfg ]]; then
        echo 'Installing mounted configuration file from /etc/cri-resmgr/fallback.cfg to host /etc/cri-resmgr'
        cp -v /etc/cri-resmgr/fallback.cfg /var/host/etc/cri-resmgr/fallback.cfg
      else 
        echo 'Installing fallback configuration file from container image (from release tgz).'
        cp -v /cri-resmgr-installation/etc/cri-resmgr/fallback.cfg.sample /var/host/etc/cri-resmgr/fallback.cfg
      fi

      # Handle force.cfg
      if [[ -f /etc/cri-resmgr/force.cfg ]]; then
        echo 'Installing mounted configuration file from /etc/cri-resmgr/force.cfg to host /etc/cri-resmgr/'
        cp -v /etc/cri-resmgr/force.cfg /var/host/etc/cri-resmgr/force.cfg
        sed -i 's!fallback!force!g' /var/host/etc/default/cri-resource-manager
      else 
        # check if force is used and remove if not mounted (from filesystem config systemd config
        if [[ -f /var/host/etc/cri-resmgr/force.cfg ]]; then
          rm -v /var/host/etc/cri-resmgr/force.cfg
        fi
        sed -i 's!force!fallback!g' /var/host/etc/default/cri-resource-manager
      fi

      # Handle EXTRA_OPTIONS
      if [[ -f /etc/cri-resmgr/EXTRA_OPTIONS.cfg ]]; then
        echo 'Installing EXTRA_OPTIONS configuration file from /etc/cri-resmgr/EXTRA_OPTIONS to host /etc/cri-resmgr/'
        cp -v /etc/cri-resmgr/EXTRA_OPTIONS.cfg /var/host/etc/cri-resmgr/EXTRA_OPTIONS.cfg
        echo 'Modify cri-resource-manager.service to include EXTRA_OPTIONS when starting cri-resmgr binary!'
        sed -i 's!\$POLICY_OPTIONS$!\$POLICY_OPTIONS \$EXTRA_OPTIONS!' /var/host/etc/systemd/system/cri-resource-manager.service
        sed -z -i 's!EnvironmentFile=/etc/default/cri-resource-manager\nExecStart!EnvironmentFile=/etc/default/cri-resource-manager\nEnvironmentFile=/etc/cri-resmgr/EXTRA_OPTIONS.cfg\nExecStart!' /var/host/etc/systemd/system/cri-resource-manager.service
      else 
        if [[ -f /var/host/etc/cri-resmgr/EXTRA_OPTIONS ]]; then
          echo 'Remove EXTRA_OPTIONS.cfg file from host'
          rm -v /var/host/etc/cri-resmgr/EXTRA_OPTIONS.cfg
        fi
        echo 'Modify cri-resource-manager.service to remove EXTRA_OPTIONS when starting cri-resmgr binary!'
        sed -z -i 's!EnvironmentFile=/etc/default/cri-resource-manager\nEnvironmentFile=/etc/cri-resmgr/EXTRA_OPTIONS.cfg\n!EnvironmentFile=/etc/default/cri-resource-manager\n!' /var/host/etc/systemd/system/cri-resource-manager.service
        sed -i 's!\$POLICY_OPTIONS \$EXTRA_OPTIONS$!\$POLICY_OPTIONS!' /var/host/etc/systemd/system/cri-resource-manager.service
      fi

      # Warning if previous state exists
      if [[ -d /var/host/var/lib/cri-resmgr ]]; then
        echo 'WARNING! previous state of cri-resmgr still exists in hosts /var/lib/cri-resmgr!'
        echo '         cri-resource-manager was not properly uninstalled, cached config will be used instead of fallback.cfg'
        echo '         To fix just restart this pod or manually remove /var/lib/cri-resmgr on host.'
      fi

      echo Enable and restart cri-resource-manager systemd unit.
      chroot /var/host bash -c "systemctl enable cri-resource-manager"
      chroot /var/host bash -c "systemctl restart cri-resource-manager"

      echo Reconfigure kubelet.service to use connect to cri-resmgr.sock as container-runtime
      sed -i  '/containerd/d' /var/host/etc/systemd/system/kubelet.service
      if ! grep -q container-runtime-endpoint  "/var/host/etc/systemd/system/kubelet.service"; then
        # matches GardenLinux kubelet config
        sed '/KUBELET_EXTRA_ARGS \\/ s!$!\n    --container-runtime-endpoint=/var/run/cri-resmgr/cri-resmgr.sock\\!' -i /var/host/etc/systemd/system/kubelet.service
        # matches kind-node kubelet config
        sed '/KUBELET_EXTRA_ARGS$/ s!$! \\\n    --container-runtime-endpoint=/var/run/cri-resmgr/cri-resmgr.sock\\!' -i /var/host/etc/systemd/system/kubelet.service
      fi
      echo Wait for cri-resource-manager, container and kubelet services to be active
      # Check if cri-resource-manager, containerd and kubelet is active
      while true; do
          criIsActive=$(chroot /var/host bash -c "systemctl is-active cri-resource-manager")
          containerdIsActive=$(chroot /var/host bash -c "systemctl is-active containerd")
          kubeletIsActive=$(chroot /var/host bash -c "systemctl is-active kubelet")
          if [ "$criIsActive" == "active" ] && [ "$containerdIsActive" == "active" ] && [ "$kubeletIsActive" == "active" ];then
              break
          fi
          sleep 1
      done
      echo "*** Restart kubelet with new configuration"
      sleep 2
      chroot /var/host bash -c "systemctl daemon-reload"
      chroot /var/host bash -c "systemctl restart kubelet"
      # Don't wait for activation - we will run check at the of the script
    }

    function uninstall() {
      echo "*** Staring uninstallation procedure..." 

      # Remove cri-resmgr from kubelet configuration
      echo "Remove cri-resmgr from kubelet configuration"
      sed -i '/\[Unit\]/aAfter=containerd.service' /var/host/etc/systemd/system/kubelet.service
      sed -i 's/\/var\/run\/cri-resmgr\/cri-resmgr.sock/unix:\/\/\/run\/containerd\/containerd.sock/g' /var/host/etc/systemd/system/kubelet.service

      # Stop and disable cri-resource-manager
      echo 'Stop and disable cri-resource-manager'
      chroot /var/host bash -c "systemctl disable cri-resource-manager"
      chroot /var/host bash -c "systemctl stop cri-resource-manager"

      # Remove files left after cri-resmgr
      echo "Remove files left after cri-resmgr"
      rm -rf /var/host/opt/intel
      rm -rf /var/host/etc/cri-resmgr
      rm -rf /var/host/etc/systemd/system/cri-resource-manager.service
      rm -rf /var/host/etc/default/cri-resource-manager 

      echo "*** Restart kubelet with original configuration"
      sleep 2
      chroot /var/host bash -c "systemctl daemon-reload"
      chroot /var/host bash -c "systemctl restart kubelet"

      # Check if kubelet is active
      echo 'Check if kubelet is active'
      while true; do
          kubeletIsActive=$(chroot /var/host bash -c "systemctl is-active kubelet")
          if [ "$kubeletIsActive" == "active" ];then
              break
          fi
      done

      # Remove cache and state directory of cri-resmgr
      rm -rf /var/lib/cri-resmgr

      # Sleep after successful removal 
      echo '*** Uninstallation successful.'
    }

    function quit() {
      echo "Try to kill pid $child myself..."
      kill -KILL "$child" 2>/dev/null
      # give 5 sec see logs 
      sleep 5
      exit 0
    }

    function uninstall_and_quit() {
      uninstall
      quit
    }

    # Install cri-rm
    install

    #echo "Setup termination handler."
    trap uninstall_and_quit SIGTERM SIGINT

    # Sleep after installation the task
    echo "cri-resource-manager installed. Run checks in a loop..."
    # Wait five seconds before first check to allow kubelet/cri-resmgr to switch from activating to active state.
    sleep 5
    while true; do
      # Run checks and uninstall if there is any issues with kubelet or cri-rm or containerd
      criIsActive=$(chroot /var/host bash -c "systemctl is-active cri-resource-manager")
      kubeletIsActive=$(chroot /var/host bash -c "systemctl is-active kubelet")
      containerdIsActive=$(chroot /var/host bash -c "systemctl is-active containerd")
      if [ "$criIsActive" == "activating" ] || [ "$containerdIsActive" == "activating" ] || [ "$kubeletIsActive" == "activating" ];then
        echo "*** [$(date --rfc-3339=seconds)] Checks WARNING (cri-resource-manager=${criIsActive} kubelet=${kubeletIsActive} containerd=${containerdIsActive}) is activating!"
      fi
      
      if [ "$criIsActive" == "failed" ] || [ "$containerdIsActive" == "failed" ] || [ "$kubeletIsActive" == "failed" ];then
        echo "*** [$(date --rfc-3339=seconds)] Checks FAILED (cri-resource-manager=${criIsActive} kubelet=${kubeletIsActive} containerd=${containerdIsActive})"

        echo "*** Going into RECOVERY mode (stay alive but not ready) "
        echo
        echo "=========================== I. Dump broken state ============================================"
        echo "--------------------- CRI-resource-manager systemd config -----------------------------------"
        cat /var/host/etc/default/cri-resource-manager
        echo "---------------------------------------------------------------------------------------------"
        echo
        echo "--------------------- Dump configuration files and difference: Pod VS Host ---------------------------"
        echo "--- note those files are synced during pod startup only (empty section is fine) -------------"
        if [[ -f /etc/cri-resmgr/force.cfg ]]; then
          echo
          echo --- Host/force.cfg 
          cat /var/host/etc/cri-resmgr/force.cfg
          echo --- comparing Pod/force.cfg Host/force.cfg
          diff /etc/cri-resmgr/force.cfg /var/host/etc/cri-resmgr/force.cfg
        fi
        if [[ -f /etc/cri-resmgr/fallback.cfg ]]; then
          echo
          echo --- Host/fallback.cfg:
          cat /var/host/etc/cri-resmgr/fallback.cfg
          echo --- comparing Pod/fallback.cfg Host/fallback.cfg
          diff /etc/cri-resmgr/fallback.cfg /var/host/etc/cri-resmgr/fallback.cfg
        fi
        if [[ -f /var/host/etc/cri-resmgr/EXTRA_OPTIONS.cfg ]]; then
          echo
          echo --- Host/EXTRA_OPTIONS.cfg:
          cat /var/host/etc/cri-resmgr/EXTRA_OPTIONS.cfg
          echo
          echo --- comparing Pod/EXTRA_OPTIONS.cfg Host/EXTRA_OPTIONS.cfg:
          diff /etc/cri-resmgr/EXTRA_OPTIONS.cfg /var/host/etc/cri-resmgr/EXTRA_OPTIONS.cfg
          echo
        fi
        echo "---------------------------------------------------------------------------------------------"
        echo
        echo "--------------------- CRI-resource-manager last 50 lines of logs ----------------------------"
        chroot /var/host journalctl -u cri-resource-manager -n 50 -o cat
        echo "---------------------------------------------------------------------------------------------"
        echo
        echo "=========================== II. Uninstall cri-resource-manager =============================="
        echo "Uninstall cri-resource-manager "
        uninstall
        echo
        echo "=========================== III. Sleep forever... =============================="
        echo "Note: sleep to give "human" a chance to fix config/state (then please restart this pod)..."
        sleep inf
      else
        echo "*** [$(date --rfc-3339=seconds)] Checks OK (cri-resource-manager=${criIsActive} kubelet=${kubeletIsActive} containerd=${containerdIsActive})"
      fi

      # Put sleep in background and wait to allow bash to capture and handle signals
      # based on https://unix.stackexchange.com/questions/146756/forward-sigterm-to-child-in-bash
      sleep 60 &
      child=$!
      echo "Wait for sleeping child: ${child}"
      wait $child

    done


